name: ISO 27001 Gap Analyzer

on:
  workflow_dispatch:
    inputs:
      implementation_path:
        description: "Path to implemented controls JSON"
        required: false
        default: "samples/implemented_controls.json"
      controls_path:
        description: "Path to ISO controls JSON"
        required: false
        default: "samples/iso_27001_controls.json"
      push_reports:
        description: "Commit reports to gh-pages-reports branch (true/false)"
        required: false
        default: "true"   # default enabled
  push:
    branches: [ "main" ]
    paths:
      - "gap_analyzer.py"
      - "iso_27001_controls.json"
      - "implemented_controls.json"
      - "samples/**"
      - ".github/workflows/gap.yml"
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  analyze:
    runs-on: ubuntu-latest
    concurrency:
      group: iso-gap-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install (no external deps)
        run: |
          python -V
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Resolve inputs
        id: paths
        shell: bash
        run: |
          impl="${{ github.event.inputs.implementation_path }}"
          ctrls="${{ github.event.inputs.controls_path }}"
          if [ -z "$impl" ]; then impl="samples/implemented_controls.json"; fi
          if [ -z "$ctrls" ]; then ctrls="samples/iso_27001_controls.json"; fi
          echo "impl=$impl"  >> "$GITHUB_OUTPUT"
          echo "ctrls=$ctrls" >> "$GITHUB_OUTPUT"
          mkdir -p reports

      - name: Run analyzer
        run: |
          python gap_analyzer.py \
            --implementation "${{ steps.paths.outputs.impl }}" \
            --controls "${{ steps.paths.outputs.ctrls }}" \
            --out-json reports/gap_report.json \
            --out-md reports/gap_report.md

      - name: Verify outputs exist
        run: |
          test -s reports/gap_report.json
          test -s reports/gap_report.md

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: iso27001-gap-report
          path: reports/*

      - name: Preview Markdown (first 80 lines)
        if: always()
        run: |
          echo "---- gap_report.md (preview) ----"
          head -n 80 reports/gap_report.md || true

      - name: Decide whether to push reports
        id: pushflag
        run: |
          flag="${{ github.event.inputs.push_reports }}"
          if [ -z "$flag" ]; then flag="true"; fi
          echo "flag=$flag" >> "$GITHUB_OUTPUT"

      - name: Commit reports to gh-pages-reports (timestamped + latest)
        if: ${{ steps.pushflag.outputs.flag == 'true' && github.ref == 'refs/heads/main' }}
        shell: bash
        run: |
          set -e
          BRANCH=gh-pages-reports
          TS=$(date -u +'%Y%m%dT%H%M%SZ')  # safe folder name, UTC
          DEST="ci_reports/${TS}"
          LATEST="ci_reports/latest"

          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"

          # Create/update branch
          git fetch origin $BRANCH || true
          git checkout -B $BRANCH

          # Place reports under timestamped folder
          mkdir -p "$DEST"
          cp -r reports/* "$DEST/"

          # Maintain a 'latest' copy for convenience
          rm -rf "$LATEST"
          mkdir -p "$LATEST"
          cp -r reports/* "$LATEST/"

          # Optional: index/README
          echo "ci_reports/ â€” ISO27001 gap reports generated by GitHub Actions" > ci_reports/README
          echo "" >> ci_reports/README
          echo "Each run is stored under a UTC timestamp (YYYYMMDDTHHMMSSZ). The 'latest' folder mirrors the most recent run." >> ci_reports/README

          git add ci_reports
          git commit -m "CI: add gap reports at ${TS}" || echo "No changes"
          git push origin $BRANCH
